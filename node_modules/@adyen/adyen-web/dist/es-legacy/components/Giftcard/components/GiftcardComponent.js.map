{"version":3,"file":"GiftcardComponent.js","sources":["../../../../../src/components/Giftcard/components/GiftcardComponent.tsx"],"sourcesContent":["import { Component, FunctionComponent, h } from 'preact';\nimport SecuredFieldsProvider from '../../internal/SecuredFields/SFP/SecuredFieldsProvider';\nimport Alert from '../../internal/Alert';\nimport GiftcardResult from './GiftcardResult';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport { PaymentAmount } from '../../../types/global-types';\nimport { GIFT_CARD } from '../../internal/SecuredFields/lib/constants';\nimport { GiftCardFields } from './GiftcardFields';\nimport { GiftcardFieldsProps, Placeholders } from './types';\nimport { useSRPanelForGiftcardErrors } from './useSRPanelForGiftcardErrors';\n\ninterface GiftcardComponentProps {\n    onChange: (state) => void;\n    onFocus: (event) => void;\n    onBlur: (event) => void;\n\n    makeBalanceCheck: (event) => void;\n    makePayment: (event) => void;\n\n    amount?: PaymentAmount;\n    showPayButton: boolean;\n    payButton: (config) => any;\n\n    pinRequired: boolean;\n    expiryDateRequired?: boolean;\n    fieldsLayoutComponent: FunctionComponent<GiftcardFieldsProps>;\n    placeholders?: Placeholders;\n    handleKeyPress?: (o: KeyboardEvent) => void;\n}\n\nclass Giftcard extends Component<GiftcardComponentProps> {\n    public state = {\n        status: 'ready',\n        data: {},\n        balance: null,\n        transactionLimit: null,\n        focusedElement: false,\n        isValid: false,\n        sfpState: {},\n        isValidating: false,\n        transformedErrors: {}\n    };\n\n    public static defaultProps = {\n        pinRequired: true,\n        expiryDateRequired: false,\n        onChange: () => {},\n        onFocus: () => {},\n        onBlur: () => {},\n        fieldsLayoutComponent: GiftCardFields\n    };\n\n    public sfp;\n\n    /**\n     * Maps string error codes from SecuredFields to validation rule objects\n     */\n    public mapErrorsToValidationObjects = () => {\n        // Use the sfp reference to call mapErrorsToValidationRuleResult\n        if (!this.sfp) return {};\n        return this.sfp.mapErrorsToValidationRuleResult();\n    };\n\n    public onChange = sfpState => {\n        // Add transformed errors to the state\n        const transformedErrors = this.mapErrorsToValidationObjects();\n\n        this.setState({\n            sfpState,\n            transformedErrors\n        });\n\n        this.props.onChange({\n            data: sfpState.data,\n            isValid: sfpState.isSfpValid\n        });\n    };\n\n    public handleFocus = e => {\n        this.setState({ focusedElement: e.currentFocusObject });\n\n        const isFocused = e.focus === true;\n        if (isFocused) {\n            this.props.onFocus(e);\n        } else {\n            this.props.onBlur(e);\n        }\n    };\n\n    public setBalance = ({ balance, transactionLimit }) => {\n        this.setState({ balance, transactionLimit });\n    };\n\n    public showValidation = () => {\n        this.setState({ isValidating: true });\n\n        // Validate SecuredFields\n        this.sfp?.showValidation();\n    };\n\n    render(props, { focusedElement, balance, transactionLimit, isValidating, transformedErrors }) {\n        const { i18n } = useCoreContext();\n\n        // Handle SRPanel errors in render with transformed error objects\n        useSRPanelForGiftcardErrors({\n            errors: transformedErrors,\n            isValidating,\n            sfp: this.sfp\n        });\n\n        const transactionAmount = transactionLimit?.value < balance?.value ? transactionLimit : balance;\n        const hasEnoughBalance = transactionAmount?.value >= this.props.amount?.value;\n\n        if (transactionAmount && hasEnoughBalance) {\n            return (\n                <GiftcardResult\n                    amount={this.props.amount}\n                    balance={balance}\n                    transactionLimit={transactionLimit}\n                    makePayment={props.makePayment}\n                    status={this.state.status}\n                    makeBalanceCheck={props.makeBalanceCheck}\n                    showPayButton={this.props.showPayButton}\n                    payButton={this.props.payButton}\n                />\n            );\n        }\n\n        const getCardErrorMessage = sfpState => {\n            if (sfpState.errors.encryptedCardNumber) return i18n.get(sfpState.errors.encryptedCardNumber);\n\n            switch (this.state.status) {\n                case 'no-balance':\n                    return i18n.get('error.giftcard.no-balance');\n                case 'card-error':\n                    return i18n.get('error.giftcard.card-error');\n                case 'currency-error':\n                    return i18n.get('error.giftcard.currency-error');\n                default:\n                    return null;\n            }\n        };\n\n        return (\n            <div className=\"adyen-checkout__giftcard\">\n                {this.state.status === 'error' && <Alert icon={'cross'}>{i18n.get('error.message.unknown')}</Alert>}\n\n                <SecuredFieldsProvider\n                    {...this.props}\n                    ref={ref => {\n                        this.sfp = ref;\n                    }}\n                    onChange={this.onChange}\n                    onFocus={this.handleFocus}\n                    type={GIFT_CARD}\n                    render={({ setRootNode, setFocusOn }, sfpState) =>\n                        this.props.fieldsLayoutComponent({\n                            i18n: i18n,\n                            pinRequired: this.props.pinRequired,\n                            focusedElement: focusedElement,\n                            getCardErrorMessage: getCardErrorMessage,\n                            setRootNode: setRootNode,\n                            setFocusOn: setFocusOn,\n                            sfpState: sfpState\n                        })\n                    }\n                />\n\n                {this.props.showPayButton &&\n                    this.props.payButton({\n                        status: this.state.status,\n                        onClick: this.props.makeBalanceCheck,\n                        label: i18n.get('applyGiftcard')\n                    })}\n            </div>\n        );\n    }\n}\n\nexport default Giftcard;\n"],"names":["Giftcard","Component","render","props","focusedElement","balance","transactionLimit","isValidating","transformedErrors","_this_props_amount","i18n","useCoreContext","useSRPanelForGiftcardErrors","errors","sfp","this","transactionAmount","value","hasEnoughBalance","amount","h","GiftcardResult","makePayment","status","state","makeBalanceCheck","showPayButton","payButton","getCardErrorMessage","sfpState","encryptedCardNumber","get","div","className","Alert","icon","SecuredFieldsProvider","_object_spread_props","_object_spread","ref","onChange","onFocus","handleFocus","type","GIFT_CARD","setRootNode","setFocusOn","fieldsLayoutComponent","pinRequired","onClick","label","super","args","_define_property","data","isValid","mapErrorsToValidationObjects","mapErrorsToValidationRuleResult","setState","isSfpValid","e","currentFocusObject","focus","onBlur","setBalance","showValidation","_this_sfp","defaultProps","expiryDateRequired","GiftCardFields"],"mappings":"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"}